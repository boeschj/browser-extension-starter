## Browser Extension Starter
Quickly bootstrap a browser extension project with TypeScript, React, and PostCSS.

## Features

TypeScript and React support
CSS processing with PostCSS
Support for both Chrome and Firefox extensions


## Getting Started

Create your new repository using this template:
`gh repo create [your-cool-extension] --template=boeschj/browser-extension-starter`
`cd browser-extension-starter`

Install dependencies:
`yarn install`

Start the development server:
`yarn run dev:[browser]` where [browser] is either `chrome` or `firefox`

To build for production:
`yarn run build:[browser]`


### Project Structure
src/
├── Background/
│   └── index.ts
├── ContentScript/
│   └── index.ts
├── InjectedScript/
│   └── index.ts
├── Components/
│   └── index.ts
├── Pages/
│   ├── options/
│   │   └── index.tsx
│   ├── popup/
│   │   └── index.tsx
│   └── newTab/
│       └── index.tsx
public/
├── manifest.json
├── favicon.png
└── pageTemplates/
    ├── options.html
    ├── popup.html
    └── newtab.html

Flexible Entry Points

## Supported File Types

TypeScript (.ts, .tsx)
JavaScript (.js, .jsx)
CSS (.css)
Images (.jpg, .jpeg, .png, .gif, .svg)
Fonts (.woff, .woff2, .eot, .ttf, .otf)

## Available Scripts
In the project directory, you can run the following scripts:

### Development

Start the development server for Chrome. It watches for file changes and rebuilds automatically.
`yarn dev:chrome`

Start the development server for Firefox. It watches for file changes and rebuilds automatically.
`yarn dev:firefox`


### Production Build

yarn build:chrome: Creates a production build for Chrome.
yarn build:chrome

yarn build:firefox: Creates a production build for Firefox.
yarn build:firefox


### Development Workflow

Start the development server for your target browser:
`yarn dev:chrome`
or
`yarn dev:firefox`

Load the extension in your browser:

For Chrome: Go to chrome://extensions/, enable "Developer mode", click "Load unpacked", and select the build directory.
For Firefox: Go to about:debugging#/runtime/this-firefox, click "Load Temporary Add-on", and select any file in the build directory.

The extension will automatically rebuild when you make changes to the source files. You'll need to refresh the extension in the browser to see the changes.

Building for Production
When you're ready to create a production build:

Run the build script for your target browser:
`yarn build:chrome`
or
`yarn build:firefox`

The production-ready extension will be in the `distribution` directory, ready for submission to the respective extension store.

## Gotchas and Limitations

Manifest file: The manifest.json file must be present in the public directory and named exactly manifest.json.
Favicon: The favicon must be named favicon.png and placed in the public directory.
HTML templates: The HTML templates for options, popup, and new tab pages must be present in the public/pageTemplates directory, even if you're not using all of these pages. The build will fail if a template is missing.
Entry point naming: The entry point files (e.g., background script, content script) must be named index.ts (or index.tsx for React components) and placed in their respective directories.
CSS Modules: This configuration doesn't support CSS Modules out of the box. If you need CSS Modules, you'll need to modify the webpack configuration.
Browser-specific manifest keys: Use __chrome__ and __firefox__ prefixes in your manifest.json for browser-specific keys. The build process will include only the relevant keys for the target browser.
Optimization limitations: The splitChunks optimization is not applied to background, content, and injected scripts to maintain their independence.
Development mode: When running in development mode, you'll need to manually load the extension into your browser and reload it after making changes.

Customizing the Configuration
While this configuration is designed to be flexible, you may need to customize it further for specific needs. The main webpack configuration file is webpack.common.js. Be cautious when modifying this file, as changes may affect the build process for all components.
Contributing
Contributions are welcome! Please feel free to submit a Pull Request.
License
This project is licensed under the MIT License - see the LICENSE file for details.